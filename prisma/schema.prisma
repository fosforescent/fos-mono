datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model UserModel {
  id                               Int     @id @default(autoincrement())
  user_name                        String  @unique
  password                         String
  // openapi_token                     String?  @default("")
  // api_calls_available               Int     @default(0)
  // api_calls_used                     Int     @default(0)
  // api_calls_total                   Int     @default(0)
  api_calls_available              Int     @default(0)
  api_calls_used                   Int     @default(0)
  api_calls_total                  Int     @default(0)
  user_profile                     Json    @default("{}")
  // data                              Json     @default("{}")
  portal_session_id                String?
  // connect_session_id            String?
  // topup_checkout_session_id         String
  subscription_checkout_session_id String? @unique
  stripe_connected_account_id      String? @unique
  stripe_connect_enabled           Boolean @default(false)
  stripe_connect_linked            Boolean @default(false)

  stripe_customer_id            String?                      @unique
  subscription_status           String                       @default("")
  email_confirmation_token      String?                      @unique
  email_confirmation_expiration DateTime?
  password_reset_token          String?                      @unique
  password_reset_expiration     DateTime?
  approved                      Boolean                      @default(false)
  accepted_terms                DateTime
  cookies                       Json                         @default("{}")
  data                          Json                         @default("{}")
  // profile                       Json                    @default("{}")
  fosNode                       FosNodeModel                 @relation(fields: [fosNodeId], references: [cid])
  fosNodeId                     String                       @unique
  // platform_fees          PlatformFee[]
  AuthEvent                     UserEventModel[]
  ClientError                   ClientErrorModel[]
  createdAt                     DateTime                     @default(now())
  updatedAt                     DateTime                     @default(now())
  FosNodeUserAccessLink         FosNodeUserAccessLinkModel[]
}

model InboundEmailModel {
  id         Int      @id @default(autoincrement())
  from       String
  to         String
  subject    String?
  textBody   String?
  htmlBody   String?
  receivedAt DateTime @default(now())
}

model OutboundEmailModel {
  id                      Int                            @id @default(autoincrement())
  from                    String
  to                      String
  templateAlias           String
  templateModel           Json
  OutboundDeliveryAttempt OutboundDeliveryAttemptModel[]
}

model OutboundDeliveryAttemptModel {
  id        Int                @id @default(autoincrement())
  emailId   Int
  timestamp DateTime           @default(now())
  status    String
  reason    String?
  email     OutboundEmailModel @relation(fields: [emailId], references: [id])
}

model UserEventModel {
  id        Int       @id @default(autoincrement())
  userId    Int
  eventType String
  timestamp DateTime  @default(now())
  ipAddress String
  userAgent String
  location  String
  status    Boolean
  reason    String?
  user      UserModel @relation(fields: [userId], references: [id])
}

model ClientErrorModel {
  id        Int        @id @default(autoincrement())
  userId    Int?
  timestamp DateTime   @default(now())
  error     Json
  user      UserModel? @relation(fields: [userId], references: [id])
}

model FosNodeUserAccessLinkModel {
  id            Int          @id @default(autoincrement())
  fosNodeId     String
  userId        Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  fosTargetNode FosNodeModel @relation(fields: [fosNodeId], references: [cid])
  fosGroup      UserModel    @relation(fields: [userId], references: [id])
}

model FosNodeModel {
  cid                   String                       @unique
  data                  Json                         @default("{}")
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @default(now())
  public                Boolean                      @default(false)
  FosNodeUserAccessLink FosNodeUserAccessLinkModel[]
  User                  UserModel?
  Vectors               NodeVectorModel[]
}

model NodeVectorModel {
  id        Int                         @id @default(autoincrement())
  content   String
  embedding Unsupported("vector(1024)")
  metadata  Json
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
  nodeId    String
  fosNode   FosNodeModel                @relation(fields: [nodeId], references: [cid])
  @@index([embedding])  // Remove the Raw syntax for now

}

// model StripePayout {
//  id              Int      @id @default(autoincrement())
//  payout_id       String   @unique
//  amount          Int
//  currency        String
//  status          String
//  failure_reason  String?
//  arrival_date    DateTime?
//  created_at      DateTime @default(now())
//  updated_at      DateTime @updatedAt
//  user            User     @relation(fields: [user_id], references: [id])
//  user_id         Int
//}

// model PlatformFee {
//   id                  String   @id @default(uuid())
//   amount              Int
//   payment_intent_id   String   @unique
//   connected_account_id String
//   status              String   // 'collected', 'failed', 'pending'
//   created_at          DateTime @default(now())
//   user                User     @relation(fields: [connected_account_id], references: [stripe_connected_account_id])
// }
