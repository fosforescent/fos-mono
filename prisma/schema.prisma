datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id                               Int     @id @default(autoincrement())
  user_name                        String  @unique
  password                         String
  // openapi_token                     String?  @default("")
  // api_calls_available               Int     @default(0)
  // api_calls_used                     Int     @default(0)
  // api_calls_total                   Int     @default(0)
  api_calls_available              Int     @default(0)
  api_calls_used                   Int     @default(0)
  api_calls_total                  Int     @default(0)
  user_profile                     Json    @default("{}")
  // data                              Json     @default("{}")
  portal_session_id                String?
  // connect_session_id            String?
  // topup_checkout_session_id         String
  subscription_checkout_session_id String?
  stripe_connected_account_id      String? @unique
  stripe_connect_enabled           Boolean @default(false)
  stripe_connect_linked            Boolean @default(false)

  stripe_customer_id            String?   @unique
  subscription_status           String    @default("")
  email_confirmation_token      String?   @unique
  email_confirmation_expiration DateTime?
  password_reset_token          String?   @unique
  password_reset_expiration     DateTime?
  approved                      Boolean   @default(false)
  accepted_terms                DateTime
  cookies                       Json      @default("{}")
  data                          Json      @default("{}")
  fosGroup                      FosGroup  @relation(fields: [fosGroupId], references: [id])
  fosGroupId                    Int       @unique

  // platform_fees          PlatformFee[]
  AuthEvent   UserEvent[]
  ClientError ClientError[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
}

model InboundEmail {
  id         Int      @id @default(autoincrement())
  from       String
  to         String
  subject    String?
  textBody   String?
  htmlBody   String?
  receivedAt DateTime @default(now())
}

model OutboundEmail {
  id                      Int                       @id @default(autoincrement())
  from                    String
  to                      String
  templateAlias           String
  templateModel           Json
  OutboundDeliveryAttempt OutboundDeliveryAttempt[]
}

model OutboundDeliveryAttempt {
  id        Int           @id @default(autoincrement())
  emailId   Int
  timestamp DateTime      @default(now())
  status    String
  reason    String?
  email     OutboundEmail @relation(fields: [emailId], references: [id])
}

model UserEvent {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventType String
  timestamp DateTime @default(now())
  ipAddress String
  userAgent String
  location  String
  status    Boolean
  reason    String?
  user      User     @relation(fields: [userId], references: [id])
}

model ClientError {
  id        Int      @id @default(autoincrement())
  userId    Int?
  timestamp DateTime @default(now())
  error     Json
  user      User?    @relation(fields: [userId], references: [id])
}

model DataHistory {
  id        Int      @id @default(autoincrement())
  group_id  Int
  data      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  group     FosGroup @relation(fields: [group_id], references: [id])
}

model FosGroup {
  id                     Int                      @id @default(autoincrement())
  rootTargetNode         FosNode                  @relation(fields: [rootTargetNodeId], references: [id], name: "RootTargetNode")
  rootTargetNodeId       String                   @db.Uuid
  rootInstructionNode    FosNode                  @relation(fields: [rootInstructionNodeId], references: [id], name: "RootInstructionNode")
  rootInstructionNodeId  String                   @db.Uuid
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  data                   Json                     @default("{}")
  user                   User?
  privateKey             String
  publicKey              String
  DataHistory            DataHistory[]
  FosNodeGroupAccessLink FosNodeGroupAccessLink[]
  FosNode                FosNode?                 @relation(fields: [fosNodeId], references: [id])
  fosNodeId              String?                  @db.Uuid
}

model FosNodeGroupAccessLink {
  id         Int      @id @default(autoincrement())
  fosNodeId  String   @db.Uuid
  fosGroupId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  fosNode    FosNode  @relation(fields: [fosNodeId], references: [id])
  fosGroup   FosGroup @relation(fields: [fosGroupId], references: [id])
}

model FosNode {
  id                     String                   @id @default(uuid()) @db.Uuid
  data                   Json                     @default("{}")
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  cid                    String
  instructionOfGroup     FosGroup[]               @relation("RootTargetNode")
  FosNodeGroupAccessLink FosNodeGroupAccessLink[]
  targetOfGroup          FosGroup[]               @relation("RootInstructionNode")
  FosGroup               FosGroup[]
}

// model StripePayout {
//  id              Int      @id @default(autoincrement())
//  payout_id       String   @unique
//  amount          Int
//  currency        String
//  status          String
//  failure_reason  String?
//  arrival_date    DateTime?
//  created_at      DateTime @default(now())
//  updated_at      DateTime @updatedAt
//  user            User     @relation(fields: [user_id], references: [id])
//  user_id         Int
//}

// model PlatformFee {
//   id                  String   @id @default(uuid())
//   amount              Int
//   payment_intent_id   String   @unique
//   connected_account_id String
//   status              String   // 'collected', 'failed', 'pending'
//   created_at          DateTime @default(now())
//   user                User     @relation(fields: [connected_account_id], references: [stripe_connected_account_id])
// }
